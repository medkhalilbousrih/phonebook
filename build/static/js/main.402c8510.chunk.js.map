{"version":3,"sources":["components/filter.js","components/notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Filter","newFilter","handleFilterChange","value","onChange","Notification","message","className","url","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","setNewFilter","setMessage","useEffect","axios","get","then","response","data","catch","error","console","log","handleClick","p","id","window","confirm","name","delete","filter","p1","e","target","onSubmit","preventDefault","newPerson","person","number","find","put","update","obj","map","post","concat","type","includes","key","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.402c8510.chunk.js","sourcesContent":["import React from 'react';\r\nconst Filter = ({newFilter, handleFilterChange}) => {\r\n  return (\r\n    <div>\r\n      filter: <input value={newFilter} onChange={handleFilterChange} />\r\n    </div>\r\n  );\r\n};\r\nexport default Filter;","import React from \"react\";\r\n\r\nconst Notification = ({message}) => {\r\n    if(message === null) {\r\n        return null\r\n    }\r\n    return(\r\n        <div className=\"message\">\r\n            <p>{message}</p>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Notification;","import axios from \"axios\";\r\n\r\nconst url = \"/api/persons\";\r\n\r\nconst getData = () => {\r\n  const request = axios.get(url);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst create = (newPerson) => {\r\n  const request = axios.post(url, newPerson);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst removeP = (id) => {\r\n  return axios.delete(url + \"/\" + id);\r\n};\r\n\r\nconst update = (id, person) => {\r\n  const request = axios.put(url + \"/\" + id, person);\r\n  return request.then((response) => response.data);\r\n};\r\nexport { create, getData, removeP, update };\r\n","import React, { useState, useEffect } from \"react\";\nimport Filter from \"./components/filter\";\nimport Notification from \"./components/notification\";\nimport { create, getData, removeP, update } from \"./services/persons\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [newFilter, setNewFilter] = useState(\"\");\n  const [message, setMessage] = useState(null);\n\n  useEffect(() => {\n    getData()\n      .then((data) => {\n        setPersons(data);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const person = {\n      name: newName,\n      number: newNumber,\n    };\n    if (persons.find((p) => p.name === person.name)) {\n      if (window.confirm(\"update phone number\")) {\n        const id = persons.find((p) => p.name === person.name).id;\n        update(id, person).then((obj) => {\n          setPersons(persons.map((p) => (p.id !== obj.id ? p : obj)));\n        });\n      }\n    } else {\n      create(person).then((obj) => {\n        setPersons(persons.concat(obj));\n        setNewName(\"\");\n        setNewNumber(\"\");\n      });\n    }\n  };\n\n  const handleNameChange = (e) => {\n    setNewName(e.target.value);\n  };\n\n  const handleNumChange = (e) => {\n    setNewNumber(e.target.value);\n  };\n\n  const handleFilterChange = (e) => {\n    setNewFilter(e.target.value);\n  };\n\n  const handleClick = (p) => {\n    if (window.confirm(\"delete \" + p.name))\n      removeP(p.id)\n        .then(() => {\n          setPersons(persons.filter((p1) => p.id !== p1.id));\n          setMessage(\"deleted\");\n        })\n        .catch((error) => {\n          console.log(\"already deleted\");\n          setPersons(persons.filter((p1) => p.id !== p1.id));\n        });\n  };\n\n  const show = () => {\n    const list = persons.filter((p) => p.name.includes(newFilter));\n    return list.map((p) => (\n      <p key={p.id}>\n        {p.name} {p.number}{\" \"}\n        <button onClick={() => handleClick(p)}>delete</button>\n      </p>\n    ));\n  };\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification  message={message}/>\n      <Filter newFilter={newFilter} handleFilterChange={handleFilterChange} />\n      <form onSubmit={handleSubmit}>\n        <h2>add a new</h2>\n        <div>\n          name: <input value={newName} onChange={handleNameChange} />\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={handleNumChange} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      <h2>Numbers</h2>\n      {show()}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}